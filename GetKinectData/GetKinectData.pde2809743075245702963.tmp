import org.openkinect.freenect.*;
import org.openkinect.processing.*;

Kinect kinect;
int depth[];
float[] depthLookUp = new float[2048];

void setup(){
  size(640, 520);
  kinect = new Kinect(this);
  for (int i = 0; i < depthLookUp.length; i++) {
    depthLookUp[i] = rawDepthToMeters(i);
  }
}

void draw() {
  background(255);  
  kinect.initDepth();
  depth = kinect.getRawDepth();
  
  if(depth == null) return;
  
  for(int x = 0; x <kinect.width ; x++){
    for(int y = 0; y <kinect.height; y++ ){
     
      int offset = x + y * kinect.width;
      int rawDepth = depth[offset];
      println("start printing....");
      PVector v = depthToWorld(x, y, rawDepth);
      println("x: "+v.x +" y: " + v.y + " z. "+ v.z);
    }
    }
}

float rawDepthToMeters(int depthValue) {
  if (depthValue < 2047) {
    return (float)(1.0 / ((double)(depthValue) * -0.0030711016 + 3.3309495161));
  }
  return 0.0f;
}

PVector depthToWorld(int x, int y, int depthValue) {

  final double fx_d = 1.0 / 5.9421434211923247e+02;
  final double fy_d = 1.0 / 5.9104053696870778e+02;
  final double cx_d = 3.3930780975300314e+02;
  final double cy_d = 2.4273913761751615e+02;

  PVector result = new PVector();
  double depth =  depthLookUp[depthValue];//rawDepthToMeters(depthValue);
  result.x = (float)((x - cx_d) * depth * fx_d);
  result.y = (float)((y - cy_d) * depth * fy_d);
  result.z = (float)(depth);
  return result;
}